---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: awsnode
  annotations:
    kubernetes.io/description: 'psp to attach to aws-node'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
  labels:
    kubernetes.io/cluster-service: "true"
    eks.amazonaws.com/component: pod-security-policy
spec:
  privileged: true
  allowPrivilegeEscalation: true
  volumes:
  - configMap
  - secret
  - hostPath
  allowedHostPaths:
  - pathPrefix: "/opt/cni/bin"
  - pathPrefix: "/etc/cni/net.d"
  - pathPrefix: "/var/log"
  - pathPrefix: "/var/run/docker.sock"
  - pathPrefix: /var/run/dockershim.sock
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eks:podsecuritypolicy:awsnode
  namespace: kube-system
  labels:
      kubernetes.io/cluster-service: "true"
      eks.amazonaws.com/component: pod-security-policy
rules:
- apiGroups:
  - policy
  resourceNames:
  - awsnode
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eks:podsecuritypolicy:awsnode
  namespace: kube-system
  annotations:
    kubernetes.io/description: 'Allow service account aws-node to use awsnode psp in kube-system namespace.'
  labels:
    kubernetes.io/cluster-service: "true"
    eks.amazonaws.com/component: pod-security-policy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: eks:podsecuritypolicy:awsnode
subjects:
  - kind: ServiceAccount
    name: aws-node
    namespace: kube-system
